---
layout: post
title: 《浏览器工作原理与实践》笔记
tags: [browser]
---

# 1 - 宏观视觉上的浏览器

## 1.1 - Chrome 架构：仅仅打开了 1 个页面，为什么有 4 个进程

![](/img/posts/browser/1.png)

打开浏览器的任务管理器，有时候会很好奇为什么只开了一两个标签页面，但是进程却那么多

我们先看看进程和线程的区别

### 进程和线程

进程是程序运行的实例，启动程序的时候，操作系统为它分配一块内存，用来存放代码，运行中的数据和一个执行任务的主线程。我们把这套环境称之为进程

线程由进程启动和管理，依附于进程，主要执行任务。

看看一个进程里面单线程和多线程处理问题的示例图

![](/img/posts/browser/2.png)

多线程可以并行运算提高效率，是不是感觉开启多线程是不错的选择

总结看看线程和进程关系：

1. 进程任一一个线程崩溃的话，整个进程都会崩溃
2. 线程共享进程中的数据
   ![](/img/posts/browser/3.png)
3. 进程关闭后，所有占用的资源都会回收
4. 进程之间相互独立，彼此之间数据是严格独立的，即使挂了也不会影响其他进程

### 单进程浏览器时代

单进程浏览器：所有功能模块都运行在同一个进程中，包括网络，插件，JavaScript 运行环境，渲染引擎和页面，如下图，是一种单进程多线程的模式

![](/img/posts/browser/4.png)

这种模式有很多问题：

1. 不稳定：渲染引擎，或者一些第三方的插件不稳定崩溃的话，会导致整个浏览器进程崩溃
2. 不流畅：所有页面的渲染模块，JavaScript 运行环境和插件运行在一起，如果一个线程在运行一个高内存的任务，其他线程可能都无法得到执行了，浏览器会失去响应，造成卡顿（这里想到了时间循环系统）。另外我们的页面经常也会有一些内存没有回收的情况，如果只是关闭页面，即关闭了一个线程，不能完全回收内存，那么用的越久内存占用率也越高，浏览器越来越慢
3. 不安全：这块感觉是因为进程内所有线程的内存是共享的，第三方插件可能通过一些手段攻击或者窃取信息导致的安全问题

以前经常存在的一个场景就是，一个页面崩溃了，导致所有浏览的页面都崩溃了，非常崩溃

### 多进程浏览器时代

#### 早期多进程浏览器架构

前面说到的单进程浏览器时代，指的是 07 年前的，看下 08 年 谷歌发布的一个结构图

![](/img/posts/browser/5.png)

这里页面运行在单独的进程内，插件也在单独的进程内，他们通过 IPC 进行通信

1. 解决不安全问题：现在进程是相互隔离了，现在一个页面或者插件崩溃了，都不会影响到其他插件和页面
2. 解决不流畅问题：JavaScript 运行在单独的渲染进程中，如果 JavaScript 阻塞了渲染进程，也只会影响当前页面，不会影响其他页面。而内存泄漏问题也会随着渲染进程的关闭而得到释放
3. 解决不安全问题：采用多进程的话我们可以加入安全沙盒，沙盒内的程序运行的时候不能给计算机硬盘写入任何数据，也读取不到敏感位置的信息和数据。现在给页面和插件加上了安全沙盒他们即使执行了恶意的程序，也无法获取到系统的一些敏感权限

#### 目前多进程浏览器架构

![](/img/posts/browser/6.png)

现在包括了

- 浏览器主进程(browser)：界面显示，用户交互，子进程的管理，存储能力
- GPU 进程：初衷是实现 css3 动画效果，后面页面和 UI 界面都采用 GPU 绘制，这使得它成为一个普遍的需求，所以也引入了一个单独的 GPU 进程
- 网络进程(network)：负责网络资源加载
- 多个渲染进程：把 html css js 转化为用户可操作的页面，排版引擎 blink 和 JavaScript 引擎 V8 都运行在这个进程里面，每一个页面 tab 就开通一个渲染进程
- 多个插件进程：插件容易崩溃，独立一个进程进行管理

和我们开篇的截图很像

我们打开了一个页面，但是也必须要有网络进程，浏览器主进程，GPU 进程和这个页面的渲染进程，以及安装了的插件进程。当然也存在一些新的问题

- 更高的资源占用：每个进程都包括公共的基础结构副本（比如 JavaScript 运行环境），导致更多的内存资源消耗
- 更复杂的体系架构：模块之间耦合度高，扩展性差，新需求提出的时候，添加新功能非常复杂

#### 未来面向服务的架构

16 年谷歌提出了面向服务的架构(Services Oriented Architecture，简称 SOA)

- 原来的各个模块都会重构独立成一个服务
- 每个服务独立运行在进程中
- 服务需要定义好接口，通过 IPC 通信
- 构建一个更加内聚，松耦合，易于维护和扩展的系统
- 致力于更加简单，稳定，高速和安全

最终把 UI，数据库，文件，设备，网络等模块重构为基础服务，看看现在的模型图：

![](/img/posts/browser/7.png)

也提供了灵活的弹性架构，性能好的设备上用多进程的方式运行基础服务，如果性能受限，则把这些基础服务合并到一个进程中，节省内存的占用，如下图

![](/img/posts/browser/8.png)

### 总结

- 最初的浏览器都是单进程的，它们不稳定、不流畅且不安全，引入了多进程架构，解决了这些遗留问题
- 在更多业务场景，如移动设备、VR、视频等需求下，为了支持这些场景，原来的多进程架构体系变得越来越复杂
- 进行架构的重构，最终选择了面向服务架构（SOA）形式

## 1.2 - TCP 协议：如何保证页面文件能被完整送达浏览器

一个文件会拆成很多数据包来传输，这些数据包很大概丢失或者出错，如何保证页面正常送到浏览器。

### 一个数据包的旅程

#### 数据包如何送达主机
