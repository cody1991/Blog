---
layout: post
title: 《浏览器工作原理与实践》系列笔记 - 浏览器中的页面
tags: [browser]
---

# 页面性能分析：利用 chrome 做 web 性能分析

## Chrome 开发者工具

包含了 10 个功能面板，包括了 Elements、Console、Sources、NetWork、Performance、Memory、Application、Security、Audits 和 Layers

提供了访问编辑 DOM 和 CSSOM 的能力，也提供了强大的调试和性能指标工具

## 网络面板

由控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要这 6 个区域构成

![](/img/posts/browser/page/1.png)

### 控制器

![](/img/posts/browser/page/2.png)

### 过滤器

选择自己想看的文件类型等

### 抓图信息

可以看到用户等待加载时看到的画面，分析用户的体验

### 时间线

HTTP HTTPS WebSocket 加载的状态和时间的关系，直观感受页面加载过程。如果多个堆叠在一起代表同时加载，具体需要到下面的文件列表查看

### 详细列表

每个资源发起到完成请求的所有过程状态信息，最终完成的数据信息

### 下载信息摘要

关注 DOMContentLoaded 和 Loaded 两个事件的时间

- DOMContentLoaded 代表 DOM 构建好了，所需要的 HTML CSS JavaScript 都下载完成了
- Loaded 代表加载完所有的资源了

## 网络面板中的详细列表

每个文件的信息都是非常详细的：

![](/img/posts/browser/page/3.png)

我们看下单个资源的时间线，这里涉及到了 HTTP 请求流程

![](/img/posts/browser/page/4.png)

- 查找是否有缓存
- DNS 获取 IP 地址
- 建立 TCP 连接
- 发送 HTTP 请求
- 响应头如果包含重定向，直接走回开始的步骤
- 否则接收返回数据

![](/img/posts/browser/page/5.png)

这里面每一项是什么意思呢？

首先看看 Queuing 是排队的时间，发起一个请求有时候并不能立刻发送，需要等待，有很多原因导致的

- 页面资源有优先级， CSS、HTML、JavaScript 是核心数据，优先级最高，图片、视频、音频这类资源就不是核心资源，优先级比较低，所以后者一般需要让路，进入待排队状态
- 浏览器维护了 6 个 TCP 连接，如果发起这个请求的时候都处于忙绿状态，则进入待排队状态
- 为数据分配磁盘空间也需要等待磁盘空间分配完成

等待排队完以后，进行发起连接状态，这个时候也有可能会推迟，叫做 Stalled，停滞的意思

然后是 Initial connection/SSL ，服务器建立连接的时间，包括 TCP 连接的时间，如果是 HTTPS 还有 SSL 握手的时间，协商一些加密的信息

建立好以后准备请求数据，发送给网络，就是 Request sent 阶段了，这个阶段很快，只要把浏览器缓冲区的数据发送出去就好了，一般不到 1ms

接下来就是等待服务器第一个字节的数据，称之为 TTFB，第一字节时间，是反应服务器响应速度的指标，TTFB 越短响应越快

后面进入完整数据接收状态 Content Download ，这是第一个字节到全部接收完成的时间

## 优化时间线上耗时项

### 排队时间过长 Queuing

大概是每个域名只能有 6 个 TCP 连接导致的，我们可以在一个站点下放多个资源域名，这叫做分片技术。但是更加建议升级到 HTTP/2，通过多路复用没必要最多维护 6 个 TCP 连接的限制了

### TTFB 过久

- 可能是服务器生成的数据时间过长
- 网络问题
- 发送请求头有多余的用户信息，一些不必要的 cookie 等

解决方案有下面一些

- 可以提高服务器的处理性能，也可以缓存服务器处理的结果
- 第二个问题，可以通过 CDN 来缓存静态文件
- 减去不必要的头信息，压缩头部信息

### Content Download 过久

字节数太多了，减少文件大小，比如压缩，去掉源码中不必要的地方

## 总结

如果你要去做一些实践性的项目优化，理解其背后的理论至关重要。因为理论就是一条“线”，它会把各种实践的内容“串”在一起，然后你可以围绕着这条“线”来排查问题
